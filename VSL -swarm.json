{
  "name": "VSL -swarm",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "CLient name",
              "type": "any"
            },
            {
              "name": "Context",
              "type": "any"
            }
          ]
        }
      },
      "id": "c055762a-8fe7-4141-a639-df2372f30060",
      "typeVersion": 1.1,
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        272,
        352
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=using this info\n{{ $json['CLient name'] }}  {{ $json.Context }} You are a world-class VSL Copywriter & Strategist. Your mission is to take the provided client details (offer, market, guarantee, proof, mechanism, and results) and transform them into a 3‚Äì6 minute Video Sales Letter (VSL) script that perfectly follows the framework below.\n\nThe VSL must:\n\nTrigger the core epiphanies in the prospect\n\nAnswer all 6 Validation Questions\n\nUse the Framework & Checklist strictly\n\nBe written in a natural spoken style (not formal writing)\n\nBe formatted with headings, checklists, and placeholders\n\nüéØ Epiphanies You Must Create in the Prospect\n\n‚úÖ \"This is what I've been missing\"\n\n‚úÖ \"This is what I need to get me to my goal\"\n\n‚úÖ \"I realize why everything I've tried in the past has failed and why this is going to be different\"\n\n‚úÖ \"I can see this is a NO BRAINER\"\n\n‚úÖ \"This CLEARLY works\"\n\n‚úÖ \"This is what I NEED\"\n\nüìã VSL Framework Output\n\n1. Headline (Before Video Starts)\n\n[Insert emotionally-compelling headline here]\n\n\nSpeaks to the ONE BIG THING\n\nIncludes guarantee\n\n2. Pattern Interrupt (0‚Äì10s)\n\n[Insert attention-grabbing statement/visual]\n\n\n3. Market Call-Out (0‚Äì5s)\n\n\"If you‚Äôre a [specific WHO] who [current situation/problem]...\"\n\n\n4. Offer + Mechanism (5‚Äì15s)\n\n[State the ONE BIG THING offer clearly]\n[Insert mechanism only if unique/tangible]\n\n\n5. Guarantee (15‚Äì20s)\n\n\"[ONE BIG THING] OR [refund/consequence]\"\n\n\n6. Proof of Claim (30‚Äì45s)\n\n[List 7‚Äì10 rapid-fire client results here]\n\n\n7. First CTA (Inside 60s)\n\n\"Now if this is all you need to hear‚Ä¶ click the link below...\"\n\n\n8. Second Transition (1‚Äì2 min)\n\n[Re-hook promise + justify why past failures weren‚Äôt their fault]\n\n\n9. Unique Mechanism (1‚Äì4 min)\n\nReason 1: [Why this works]  \nReason 2: [Why this works better than competitors]  \nReason 3: [Optional third reason]  \n\n\n10. Additional Results (After Mechanism)\n\n[List 5‚Äì10 more proof examples tied to mechanism]\n\n\n11. Final CTA (Last 30‚Äì60s)\n\n[Restate irresistible offer + guarantee + book a call CTA]\n\n‚úÖ Validation Checklist (Must Answer These 6 Questions)\n\nHow is this different from everything else?\n\nWhat‚Äôs in it for me?\n\nHow do I know this is real?\n\nWhat‚Äôs holding me back?\n\nHow does it work?\n\nWhat do I have to lose?\n\nüö® Critical Don‚Äôts\n\n‚ùå Don‚Äôt list all features/services ‚Äî only ONE BIG THING\n\n‚ùå Don‚Äôt use boring desk-shot openers\n\n‚ùå Don‚Äôt forget to justify their past failures\n\n‚ùå Don‚Äôt exceed 3 mechanism reasons\n\n‚ùå Don‚Äôt duplicate results\n\nüìù Input Data Required from User\n\nCompany / Offer Name\n\nIdeal Client Persona\n\nThe ONE BIG THING outcome\n\nCore Guarantee\n\nProof/Results (10+ examples)\n\nUnique Mechanism (1‚Äì3 reasons)\n\nüëâ Final Output: A fully written spoken-style VSL script (3‚Äì6 minutes) formatted section by section, ready for recording.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        528,
        352
      ],
      "id": "5a07696b-0a53-461c-9f0a-9f3f80489402",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        496,
        576
      ],
      "id": "6c819df7-288e-4ba6-9b0c-274befb18bc9",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "NVtVfXU8ka0g75RA",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Work with ai agent containing all Transcript information",
        "mongoCollection": {
          "__rl": true,
          "value": "Transcipt",
          "mode": "list",
          "cachedResultName": "Transcipt"
        },
        "vectorIndexName": "Transcript_index",
        "topK": 10,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreMongoDBAtlas",
      "typeVersion": 1.3,
      "position": [
        624,
        576
      ],
      "id": "ca6b5dab-305e-44e6-88d3-fdf76a9ad7e1",
      "name": "MongoDB Atlas Vector Store",
      "credentials": {
        "mongoDb": {
          "id": "NvKRu39VBzFWaY4f",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        704,
        784
      ],
      "id": "a3b81f59-a721-4d13-85e0-264842161538",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "NVtVfXU8ka0g75RA",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=place this page into a database page {{ $json.output }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        992,
        352
      ],
      "id": "a7692c31-3886-4e4a-923c-590015a79d0a",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        976,
        560
      ],
      "id": "88499bba-f45b-4bca-968d-c8be89c74f6d",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "NVtVfXU8ka0g75RA",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "25efcceb-c6eb-8068-85d4-f881c96b65de",
          "mode": "list",
          "cachedResultName": "VSL",
          "cachedResultUrl": "https://www.notion.so/25efccebc6eb806885d4f881c96b65de"
        },
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', `Title of the document`, 'string') }}",
        "blockUi": {
          "blockValues": [
            {
              "textContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('blockValues0_Text', `Content generated for the page`, 'string') }}"
            },
            {
              "textContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('blockValues1_Text', `Content generated for the page`, 'string') }}"
            },
            {
              "textContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('blockValues2_Text', `Content generated for the page`, 'string') }}"
            },
            {
              "textContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('blockValues3_Text', `Content generated for the page`, 'string') }}"
            },
            {
              "textContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('blockValues4_Text', `Content generated for the page`, 'string') }}"
            },
            {
              "textContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('blockValues5_Text', `Content generated for the page`, 'string') }}"
            },
            {
              "textContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('blockValues6_Text', `Content generated for the page`, 'string') }}"
            },
            {
              "textContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('blockValues7_Text', `Content generated for the page`, 'string') }}"
            },
            {
              "textContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('blockValues8_Text', `Content generated for the page`, 'string') }}"
            },
            {
              "textContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('blockValues9_Text', `Content generated for the page`, 'string') }}"
            },
            {
              "textContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('blockValues10_Text', `Content generated for the page`, 'string') }}"
            },
            {
              "textContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('blockValues11_Text', `Content generated for the page`, 'string') }}"
            },
            {
              "textContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('blockValues12_Text', `Content generated for the page`, 'string') }}"
            },
            {
              "textContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('blockValues13_Text', `Content generated for the page`, 'string') }}"
            },
            {
              "textContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('blockValues14_Text', `Content generated for the page`, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        1200,
        544
      ],
      "id": "2837a9f9-8765-4e06-b8ec-823ba874d3cc",
      "name": "Create a database page in Notion1",
      "credentials": {
        "notionApi": {
          "id": "Pdf5CnVgIwUs8A64",
          "name": "Notion account 2"
        }
      }
    }
  ],
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "CLient name": "Salon Supplies",
          "Context": "Request: Create a VSL for Salon Supplies using 'Salon Supplies - GTM Workshop - August 28' transcript as context.\nSources used: Transcript: 'Salon Supplies - GTM Workshop - August 28' (primary). Frameworks: Revitk 45-Day Predictable Growth Launchpad, VSL/One-pager template, GTM Workshop & ICP prioritisation. Templates: Revitk VSL SOP and script templates. Notion pages: 'Salon Supplies GTM: Market Opportunity & Strategic Playbook' (https://www.notion.so/Salon-Supplies-GTM-Market-Opportunity-Strategic-Playbook-25efccebc6eb8190be17d9ed4eb192b3).\nKey context & objectives (from transcript and GTM doc):\n- Client: Salon Supplies (B2B supplier for salons & stylists; also B2C ecommerce). Goal: increase demos/bookings and wholesale enquiries, and improve conversion from outreach/campaigns.\n- Primary ICPs: salon owners (independent & multi-site), salon managers, stylists with purchasing authority, salon chain procurement.\n- Main pains: tight margins, difficulty sourcing reliable stock, long lead times, lack of promotional support from suppliers, decision-makers hard to reach; need clear ROI/margin justification.\n- Desired outcomes from VSL: pre-sell product trials/demos, drive booking for wholesale demos or B2B sample requests, increase leads from social & email funnels, and support paid social/retargeting.\n- Proposed VSL objectives and CTAs: Short-form hooks for social (30s), primary VSL (60‚Äì90s) to drive 'Book a wholesale demo' or 'Request a free sample pack', and a 2:00 version for website landing pages targeting procurement teams.\n- Tone & messaging pillars: practical ROI focus, trust & reliability, operational ease (fast delivery/stock), promotional support (POS, co-marketing), proof (testimonials/case studies) and clear next-step CTA.\n- Suggested hooks: \"How top salons cut stock costs by 20% without switching suppliers\", \"Try our best-sellers in your salon ‚Äî free sample pack\", \"Stock that sells: salon-proven products, fast delivery.\"\n- Proof assets to request: customer testimonials (video/text), before/after or in-salon shots, sales uplift metrics, product B-roll (close-ups), warehouse/fulfilment footage, logo & brand guidelines.\n- Production guidance: versions needed: 15‚Äì30s social teaser, 60‚Äì90s main VSL, 120s landing page VSL. Include on-screen text, shot list/B-roll cues, thumbnail hooks, caption text for socials, suggested music mood, and KPIs to track (CTR, sample requests, demo bookings).\n- Objections & pre-emptive lines: cost/margin concerns (show margin impact), sample risk (free/low-cost sample pack), lead time/fulfilment (guaranteed shipping SLA), bulk minimums (trial packs available).\n- Required clarifications before final script: preferred CTA (Book demo vs Request sample), who appears on camera (Founder/Head of Sales or customer), any existing testimonial clips, exact offer terms (free sample pack size, shipping terms), target platforms and maximum ad lengths.\nDeliverable expectations: Notion-compatible Markdown VSL package including 3 script lengths (30s, 60‚Äì90s, 120s), hook options, on-screen text & shot list, production asset checklist, thumbnail copy, CTA variants, and a short production timeline.\nNext actions needed from client to finalise: confirm CTA and offer terms, provide brand assets and testimonials, confirm on-camera talent, and approve target platforms/lengths."
        }
      }
    ]
  },
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "MongoDB Atlas Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB Atlas Vector Store": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Create a database page in Notion1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9ba0198d-a925-48f9-bf38-ed3cb809bc1b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "76c799b332dead2b68bc6d773d7289aa5b6d95e7093e86bab151c9e9ac571b72"
  },
  "id": "Rs5hpL1AzTEzhMCg",
  "tags": []
}